
Matplotlib is a low level graph plotting library in python that serves as a visualization utility.
Matplotlib & Seaborn : Create Data Visualization with these 2 libraries (graphs, maps etc)
    - Matplotlib is mostly written in python, a few segments are written in C, Objective-C and Javascript for Platform compatibility.

1. pyplot : Most of the Matplotlib utilities lies under the pyplot submodule
    import matplotlib.pyplot as plt

    e.g. 
    import matplotlib.pyplot as plt
    import numpy as np

    xpoints = np.array([0, 6])
    ypoints = np.array([0, 250])

    plt.plot(xpoints, ypoints)
    plt.show()

2. plot() : function is used to draw points (markers) in a diagram.
    - By default, the plot() function draws a line from point to point.
    - plt.plot(xpoints, ypoints, 'o')   #To plot only the markers, you can use shortcut string notation parameter 'o', which means 'rings'.
    
    - xpoints = np.array([1, 2, 6, 8])              #Multiple Points : You can plot as many points as you like, just make sure you have the same number of points in both axis.
        ypoints = np.array([3, 8, 1, 10])
    
    - If we do not specify the points on the x-axis, they will get the default values 0, 1, 2, 3 etc., depending on the length of the y-points.
    
    - marker : 
        - fmt = marker|line|color : shorthand for specifying linestyle, marker and color
            plt.plot(ypoints, 'o:r')
        - markersize or ms : plt.plot(ypoints, marker = 'o', ms = 20)
        - markeredgecolor or mec : plt.plot(ypoints, marker = 'o', ms = 20, mec = 'r')
        - markerfacecolor or mfc : plt.plot(ypoints, marker = 'o', ms = 20, mfc = 'r')

        - both mec and mf : plt.plot(ypoints, marker = 'o', ms = 20, mec = 'r', mfc = 'r')
        - hexadecimal color is also allowed
        
        - line
            - linestyle or ls : to change the style of the plotted line : plt.plot(ypoints, linestyle = 'dotted')
            - color or c : to set the color of the line; plt.plot(ypoints, color = 'r')
            - linewidth or lw : plt.plot(ypoints, linewidth = '20.5')

    - To plot multple lines : 
        y1 = np.array([3, 8, 1, 10])
        y2 = np.array([6, 2, 7, 11])

        plt.plot(y1)
        plt.plot(y2) 
    
3.  Labels for the plot : xlabel(), ylabel(), title()
    - plt.title("Sports Watch Data")
        plt.xlabel("Average Pulse")
        plt.ylabel("Calorie Burnage")

    - fontdict :  to set font properties for the title and labels
        - e.g.
        font1 = {'family':'serif','color':'blue','size':20}
        font2 = {'family':'serif','color':'darkred','size':15}

        plt.title("Sports Watch Data", fontdict = font1)
        plt.xlabel("Average Pulse", fontdict = font2)
        plt.ylabel("Calorie Burnage", fontdict = font2)
    
    - loc : parameter in title() to position the title.
        plt.title("Sports Watch Data", loc = 'left')
    

4. grid() : to add grid lines to the plot
    -   plt.title("Sports Watch Data")
        plt.xlabel("Average Pulse")
        plt.ylabel("Calorie Burnage")

        plt.plot(x, y)
        plt.grid()
        plt.show()

    - axis : use the axis parameter in the grid() function to specify which grid lines to display
        plt.grid(axis = 'x')
    - set the line properties of the grid, like this: 
        grid(color = 'color', linestyle = 'linestyle', linewidth = number)
        plt.grid(color = 'green', linestyle = '--', linewidth = 0.5)

5. subplot() : to draw multiple plots in one figure
    - e.g. 
        import matplotlib.pyplot as plt
        import numpy as np

        #plot 1:
        x = np.array([0, 1, 2, 3])
        y = np.array([3, 8, 1, 10])

        plt.subplot(1, 2, 1)
        plt.plot(x,y)

        #plot 2:
        x = np.array([0, 1, 2, 3])
        y = np.array([10, 20, 30, 40])

        plt.subplot(1, 2, 2)
        plt.plot(x,y)

        plt.show()
    
    - function takes three arguments that describes the layout of the figure.
        The layout is organized in rows and columns, which are represented by the first and second argument.
        The third argument represents the index of the current plot.

        plt.subplot(1, 2, 1)
        #the figure has 1 row, 2 columns, and this plot is the first plot.

        plt.subplot(1, 2, 2)
        #the figure has 1 row, 2 columns, and this plot is the second plot.

    - suptitle() : Super title of all the figures

6. scatter() : to draw scatter plot. The scatter() function plots one dot for each observation. It needs two arrays of the same length, one for the values of the x-axis, and one for values on the y-axis.
    - x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
        y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])

        plt.scatter(x, y)
        plt.show()
    
    - color or c : set your own color for each scatter plot 
        x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
        y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
        plt.scatter(x, y, color = 'hotpink')

        x = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])
        y = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])
        plt.scatter(x, y, color = '#88c999')
    
    - Color Each Dot : You can even set a specific color for each dot by using an array of colors as value for the c argument:
        colors = np.array(["red","green","blue","yellow","pink","black","orange","purple","beige","brown","gray","cyan","magenta"])
        plt.scatter(x, y, c=colors)
    
    - ColorMap : The Matplotlib module has a number of available colormaps. A colormap is like a list of colors, where each color has a value that ranges from 0 to 100.
        - You can specify the colormap with the keyword argument cmap with the value of the colormap, in this case 'viridis' which is one of the built-in colormaps available in Matplotlib.
            In addition you have to create an array with values (from 0 to 100), one value for each point in the scatter plot:

            x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
            y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
            colors = np.array([0, 10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])

            plt.scatter(x, y, c=colors, cmap='viridis')
        
        - plt.colorbar() : To include the colormap in the drawing
            plt.scatter(x, y, c=colors, cmap='viridis')
            plt.colorbar()
            plt.show()
        
        - s : To change the size of dots
            x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
            y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
            sizes = np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])

            plt.scatter(x, y, s=sizes)
            plt.scatter(x, y, s=sizes, alpha=0.5)
            plt.scatter(x, y, c=colors, s=sizes, alpha=0.5, cmap='nipy_spectral')       #Combine Color Size and Alpha
        
        - alpha : to adjust the transparency of the dots with the alpha argument.

7. bar() : to draw bar graphs 
    - e.g. 
        x = np.array(["A", "B", "C", "D"])
        y = np.array([3, 8, 1, 10])

        plt.bar(x,y)
        plt.show()
    
    - barh() : to make horizontal bars
    - both bar() and barh() uses 'color' to color the bars
        plt.bar(x, y, color = "red")
    
    - weidth : The bar() takes the keyword argument width to set the width of the bars
        plt.bar(x, y, width = 0.1)      #The default width value and height value is 0.8
        plt.barh(x, y, height = 0.1)    #Note: For horizontal bars, use height instead of width

8. hist() : to create histograms
    - A histogram is a graph showing frequency distributions. It is a graph showing the number of observations within each given interval.
    - plt.hist(x)
        plt.show() 

9. pie() : To create Pie-Charts
    - y = np.array([35, 25, 25, 15])
        plt.pie(y)
        plt.show() 

    - By default the plotting of the first wedge starts from the x-axis and moves counterclockwise
    
    - label : 
        - y = np.array([35, 25, 25, 15])
            mylabels = ["Apples", "Bananas", "Cherries", "Dates"]

            plt.pie(y, labels = mylabels)
            plt.show()
    
    - startangle :
        - plt.pie(y, labels = mylabels, startangle = 90)
    
    - explode : one of the wedges to stand out
        - y = np.array([35, 25, 25, 15])
            mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
            myexplode = [0.2, 0, 0, 0]

            plt.pie(y, labels = mylabels, explode = myexplode)
            plt.show() 

    - shadow : 
        plt.pie(y, labels = mylabels, explode = myexplode, shadow = True)
    
    - colors : 
        mycolors = ["black", "hotpink", "b", "#4CAF50"]
        plt.pie(y, labels = mylabels, colors = mycolors)
    
    - legend() : 
        plt.pie(y, labels = mylabels)
        plt.legend()
        plt.show() 

        - title : 
            To add a header to the legend, add the title parameter to the legend function.
            plt.legend(title = "Four Fruits:")
    
    - 